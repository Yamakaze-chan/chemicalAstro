<section class="min-h-screen bg-gray-50 py-16 px-6 pt-24">
  <div id="editproduct" class="max-w-7xl mx-auto px-4 flex flex-col lg:flex-row gap-12 mt-[5%]">

  </div>
</section>

<script type="module">
const productEdit = document.getElementById('editproduct');
const urlParams = new URLSearchParams(window.location.search);
const id = parseInt(urlParams.get("id"));

let specKeys = [];

function renderSpecTable(specs) {
  return specs.map((spec, rowIndex) => {
    return `
      <tr class="spec-row">
        ${specKeys.map(key => `
          <td class="border px-4 py-2">
            <input type="text" name="spec_${key}_${rowIndex}" value="${spec[key] || ''}" class="w-full p-2 rounded" />
          </td>
        `).join("")}
        <td class="border px-4 py-2 text-center">
          <button type="button" class="text-red-600 font-bold remove-spec">‚ùå</button>
        </td>
      </tr>
    `;
  }).join("");
}

function renderHeader() {
  const header = document.getElementById("spec-header");
  if (!header) return;
  header.innerHTML = specKeys.map((key, index) => `
    <th class="border px-4 py-2 relative group">
      <input type="text" value="${key}" data-index="${index}" class="editable-col-name w-full p-1 rounded border focus:outline-none focus:ring-2 focus:ring-blue-400" />
      <button type="button" class="absolute top-0 right-0 text-red-500 opacity-0 group-hover:opacity-100 transition remove-col" data-col="${key}">‚ùå</button>
    </th>
  `).join("") + `<th class="border px-4 py-2 text-center">X√≥a</th>`;
}

function reindexSpecInputs() {
  const rows = document.querySelectorAll(".spec-row");
  rows.forEach((row, index) => {
    row.querySelectorAll("input[name^='spec_']").forEach(input => {
      const key = input.name.split("_")[1];
      input.name = `spec_${key}_${index}`;
    });
  });
  const specCountInput = document.getElementById("spec-count");
  if (specCountInput) specCountInput.value = rows.length;
}

async function main() {
  try {
    const res = await fetch(`/api/products?id=${id}`);
    const product = await res.json();

    if (!product || !product.id) {
      productEdit.innerHTML = `<p class="text-red-500 text-center">‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi id=${id}</p>`;
      return;
    }

    specKeys = product.specifications?.length > 0 ? Object.keys(product.specifications[0]) : [];

    productEdit.innerHTML = `
      <div class="max-w-5xl mx-auto bg-white p-8 rounded-xl shadow-xl">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">‚úèÔ∏è S·ª≠a S·∫£n Ph·∫©m</h1>
        <form id="edit-form" class="space-y-10">
          <input type="hidden" name="id" value="${id}" />

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label class="block font-semibold text-gray-700 mb-1">T√™n s·∫£n ph·∫©m</label>
              <input type="text" name="name" value="${product.name}" class="w-full border px-4 py-2 rounded-lg" required />
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-1">C√¥ng th·ª©c ph√¢n t·ª≠</label>
              <input type="text" name="formula" value="${product.formula}" class="w-full border px-4 py-2 rounded-lg" />
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-1">Kh·ªëi l∆∞·ª£ng ph√¢n t·ª≠</label>
              <input type="text" name="molarMass" value="${product.molarMass}" class="w-full border px-4 py-2 rounded-lg" />
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-1">S·ªë CAS</label>
              <input type="text" name="cas" value="${product.cas}" class="w-full border px-4 py-2 rounded-lg" />
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-1">S·ªë EINECS</label>
              <input type="text" name="einecs" value="${product.einecs}" class="w-full border px-4 py-2 rounded-lg" />
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-1">M√£ H.S</label>
              <input type="text" name="hsCode" value="${product.hsCode}" class="w-full border px-4 py-2 rounded-lg" />
            </div>
          </div>

          <div class="space-y-6">
            <div>
              <label class="block font-semibold text-gray-700 mb-2">H√¨nh Th·ª©c</label>
              <textarea name="appearance" rows="5" class="w-full border px-4 py-2 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none resize-none">${product.appearance}</textarea>
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-2">·ª®ng D·ª•ng</label>
              <textarea name="application" rows="5" class="w-full border px-4 py-2 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none resize-none">${product.application}</textarea>
            </div>
            <div>
              <label class="block font-semibold text-gray-700 mb-2">ƒê√≥ng g√≥i v√† b·∫£o qu·∫£n</label>
              <textarea name="storage" rows="5" class="w-full border px-4 py-2 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none resize-none">${product.storage}</textarea>
            </div>
          </div>

          <div>
            <label class="block font-semibold text-gray-700 mb-1 mt-4">Tags (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)</label>
            <input type="text" name="tags" value="${Array.isArray(product.tags) ? product.tags.join(', ') : ''}" class="w-full border px-4 py-2 rounded-lg" />
          </div>

          <div>
            <h2 class="text-xl font-bold text-gray-800 mt-10 mb-4">üñº ·∫¢nh ƒë·∫°i di·ªán</h2>
            <div class="mb-4">
              <img src="${product.image}" class="w-32 h-32 object-cover rounded border shadow" />
              <p class="text-sm text-gray-500 mt-2">N·∫øu b·∫°n mu·ªën thay ƒë·ªïi, h√£y ch·ªçn ·∫£nh m·ªõi b√™n d∆∞·ªõi:</p>
            </div>
            <input type="file" name="thumbnail" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100" />
          </div>

          <div>
            <h2 class="text-xl font-bold text-gray-800 mt-10 mb-4">üñº ·∫¢nh s·∫£n ph·∫©m</h2>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              ${product.images?.map(url => `
                <div class="relative">
                  <img src="${url}" class="w-full h-32 object-cover rounded border" />
                  <input type="checkbox" name="remove_images[]" value="${url}" class="absolute top-1 right-1 w-5 h-5" title="X√≥a ·∫£nh n√†y" />
                </div>
              `).join("") || ''}
            </div>
            <label class="block mb-1 font-semibold text-gray-700">Th√™m ·∫£nh s·∫£n ph·∫©m m·ªõi</label>
            <input type="file" name="images" multiple accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
          </div>

          <div>
            <h2 class="text-xl font-bold text-gray-800 mt-10 mb-4">üîç Ch·ªâ ti√™u k·ªπ thu·∫≠t</h2>
            <div class="mb-2 flex gap-2 items-center">
              <input type="text" id="new-column-name" placeholder="T√™n c·ªôt m·ªõi" class="border px-3 py-1 rounded" />
              <button type="button" id="add-column-btn" class="bg-green-500 text-white px-3 py-1 rounded">‚ûï Th√™m c·ªôt</button>
            </div>
            <div class="overflow-x-auto">
              <table class="min-w-full border border-gray-300 text-sm text-left">
                <thead class="bg-gray-100 text-gray-700 font-semibold">
                  <tr id="spec-header">
                    ${specKeys.map(key => `<th class="border px-4 py-2 relative group">${key} <button type="button" class="absolute top-0 right-0 text-red-500 opacity-0 group-hover:opacity-100 transition remove-col" data-col="${key}">‚ùå</button></th>`).join("")}
                    <th class="border px-4 py-2 text-center">X√≥a</th>
                  </tr>
                </thead>
                <tbody id="spec-list">${renderSpecTable(product.specifications || [])}</tbody>
              </table>
              <input type="hidden" id="spec-count" name="spec_count" value="${product.specifications?.length || 0}" />
            </div>
            <button type="button" id="add-spec-row" class="mt-3 bg-gray-200 px-4 py-1 rounded hover:bg-gray-300">
              ‚ûï Th√™m d√≤ng ch·ªâ ti√™u
            </button>
          </div>

          <div class="flex justify-between items-center mt-10">
            <a href="/admin/products" class="text-gray-600 hover:text-gray-800">‚Üê Quay l·∫°i</a>
            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold">
              üíæ L∆∞u thay ƒë·ªïi
            </button>
          </div>
        </form>
      </div>
    `;

    renderHeader();

    // --- C√°c s·ª± ki·ªán ---

    // Submit form
    productEdit.querySelector("#edit-form").addEventListener("submit", async (e) => {
      e.preventDefault();
      const form = e.target;

      const data = {
        id: parseInt(form.id.value),
        name: form.name.value,
        formula: form.formula.value,
        molarMass: form.molarMass.value,
        cas: form.cas.value,
        einecs: form.einecs.value,
        hsCode: form.hsCode.value,
        appearance: form.appearance.value,
        application: form.application.value,
        storage: form.storage.value,
        tags: form.tags.value.split(",").map(tag => tag.trim()).filter(Boolean),
        removeImages: Array.from(form.querySelectorAll("input[name='remove_images[]']:checked")).map(i => i.value),
        specifications: []
      };

      const rows = form.querySelectorAll(".spec-row");
      rows.forEach((row, rowIndex) => {
        const spec = {};
        row.querySelectorAll("input[name^='spec_']").forEach(input => {
          const parts = input.name.split("_");
          const key = parts[1];
          spec[key] = input.value;
        });
        data.specifications.push(spec);
      });
    console.log("D·ªØ li·ªáu g·ª≠i l√™n:", data);
      try {
        const res = await fetch("/api/update-product", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });
        const result = await res.json();
        alert(result.success ? "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!" : "‚ùå L·ªói: " + result.message);
      } catch (err) {
        alert("‚ùå G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i!");
      }
    });

    // Th√™m d√≤ng ch·ªâ ti√™u
    productEdit.addEventListener("click", (e) => {
      if (e.target.id === "add-spec-row") {
        const row = document.createElement("tr");
        row.className = "spec-row";
        row.innerHTML = `
          ${specKeys.map(key => `
            <td class="border px-4 py-2">
              <input type="text" name="spec_${key}_temp" class="w-full p-2 rounded" />
            </td>`).join("")}
          <td class="border px-4 py-2 text-center">
            <button type="button" class="text-red-600 font-bold remove-spec">‚ùå</button>
          </td>
        `;
        document.getElementById("spec-list").appendChild(row);
        reindexSpecInputs();
      }
    });

    // X√≥a d√≤ng ch·ªâ ti√™u
    productEdit.addEventListener("click", (e) => {
      if (e.target.classList.contains("remove-spec")) {
        e.target.closest("tr")?.remove();
        reindexSpecInputs();
      }
    });

    // Th√™m c·ªôt ch·ªâ ti√™u
    productEdit.addEventListener("click", (e) => {
      if (e.target.id === "add-column-btn") {
        const newCol = document.getElementById("new-column-name").value.trim();
        if (!newCol || specKeys.includes(newCol)) return;

        specKeys.push(newCol);

        const rows = document.querySelectorAll(".spec-row");
        rows.forEach(row => {
          const cell = document.createElement("td");
          cell.className = "border px-4 py-2";
          cell.innerHTML = `<input type="text" name="spec_${newCol}_temp" class="w-full p-2 rounded" />`;
          row.insertBefore(cell, row.lastElementChild);
        });

        renderHeader();
        reindexSpecInputs();
      }
    });

    // X√≥a c·ªôt ch·ªâ ti√™u
    productEdit.addEventListener("click", (e) => {
      if (e.target.classList.contains("remove-col")) {
        const key = e.target.dataset.col;
        specKeys = specKeys.filter(k => k !== key);
        document.querySelectorAll(`input[name^='spec_${key}_']`).forEach(input => input.closest("td")?.remove());
        renderHeader();
        reindexSpecInputs();
      }
    });

    // S·ª≠a t√™n c·ªôt ch·ªâ ti√™u
    productEdit.addEventListener("input", (e) => {
      if (e.target.classList.contains("editable-col-name")) {
        const index = parseInt(e.target.dataset.index);
        const newName = e.target.value.trim();
        const oldName = specKeys[index];

        if (!newName || newName === oldName || specKeys.includes(newName)) return;

        specKeys[index] = newName;

        document.querySelectorAll(`input[name^='spec_${oldName}_']`).forEach(input => {
          input.name = input.name.replace(`spec_${oldName}_`, `spec_${newName}_`);
        });
      }
    });

  } catch (err) {
    productEdit.innerHTML = `<p class="text-red-500 text-center">‚ùå L·ªói t·∫£i s·∫£n ph·∫©m: ${err.message}</p>`;
  }
}

main();

</script>
