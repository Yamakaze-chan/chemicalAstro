---
---

<section class="min-h-screen bg-gradient-to-b from-gray-100 to-gray-200 py-16 px-6">
  <div class="max-w-7xl mx-auto mt-[5%]">
    <h1 class="text-4xl font-extrabold text-center text-gray-800 mb-10">Li√™n H·ªá C·ªßa Kh√°ch H√†ng</h1>
<div class="mb-6 flex flex-col md:flex-row md:items-end gap-6 justify-center">

  <!-- T√¨m ki·∫øm -->
  <div class="flex flex-col w-full md:w-80">
    <label for="search-input" class="text-sm font-medium text-gray-700 mb-1">T√¨m ki·∫øm:</label>
    <input
      type="text"
      id="search-input"
      placeholder="üîç T√™n ho·∫∑c SƒêT..."
      class="border rounded px-4 py-2 shadow-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
    <!-- span gi·ªØ chi·ªÅu cao t∆∞∆°ng ·ª©ng -->
    <span class="text-sm text-transparent mt-1 min-h-[1.5rem]">placeholder</span>
  </div>

  <!-- B·ªô l·ªçc ng√†y -->
  <div class="flex flex-col w-full md:w-80">
    <label for="filter-date" class="text-sm font-medium text-gray-700 mb-1">Ch·ªçn ng√†y:</label>
    <input
      type="date"
      id="filter-date"
      class="border rounded px-4 py-2 shadow-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
    />
    <span id="selected-date-display" class="text-sm text-gray-600 mt-1 min-h-[1.5rem]"></span>
  </div>

  <!-- B·ªô l·ªçc tr·∫°ng th√°i -->
<div class="flex flex-col w-full md:w-80">
  <label for="filter-status" class="text-sm font-medium text-gray-700 mb-1">L·ªçc theo tr·∫°ng th√°i:</label>
  <select
    id="filter-status"
    class="border rounded px-4 py-2 shadow-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
  >
    <option value="">T·∫•t c·∫£</option>
    <option value="unread">‚ùå Ch∆∞a xem</option>
    <option value="read">‚úÖ ƒê√£ xem</option>
  </select>
  <span class="text-sm text-gray-600 mt-1 min-h-[1.5rem]">&nbsp;</span>
</div>

</div>

</div>

    <div class="overflow-auto bg-white shadow border border-gray-200">
  <!-- ‚úÖ B·ªçc to√†n b·ªô b·∫£ng v√† ph√¢n trang -->
  <div class="min-h-[600px] flex flex-col justify-between">
    <table class="min-w-[1000px] w-full bg-white text-sm">
      <thead class="bg-[var(--color-3)] text-white">
        <tr>
          <th class="px-4 py-3 text-left whitespace-nowrap">Ng√†y g·ª≠i</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">H·ªç v√† T√™n</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">Email</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">SƒêT</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">Lo·∫°i kh√°ch</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">Lƒ©nh v·ª±c</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">Tr·∫°ng th√°i</th>
          <th class="px-4 py-3 text-left whitespace-nowrap">H√†nh ƒë·ªông</th>
        </tr>
      </thead>
      <tbody id="contact-table-body" class="text-[var(--color-3)]">
        <!-- N·ªôi dung s·∫Ω ƒë∆∞·ª£c render b·∫±ng JS -->
      </tbody>
    </table>

    <!-- ‚úÖ Pagination lu√¥n n·∫±m d∆∞·ªõi -->
    <div id="pagination" class="flex justify-center gap-2 mt-6 flex-wrap p-4"></div>
  </div>
</div>

  </div>
</section>

<script>
  import contact from "../../data/contact.json";
  import { initPagination } from "../../utils/pagination.js";

  const getBusinessTypeLabel = (type: string) => {
    switch (type) {
      case "retail": return "C√° nh√¢n";
      case "service": return "Doanh nghi·ªáp";
      case "other": return "Kh√°c";
      default: return type;
    }
  };

  const getBusinessCategoryLabel = (category: string) => {
    switch (category) {
      case "retail": return "B√°n l·∫ª";
      case "service": return "D·ªãch v·ª•";
      case "manufacturing": return "S·∫£n xu·∫•t";
      case "other": return "Kh√°c";
      default: return category;
    }
  };
  

  document.addEventListener("DOMContentLoaded", () => {
    const currentPath = window.location.pathname;

    // ‚úÖ Reload n·∫øu t·ª´ trang chi ti·∫øt quay l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
     if (
    localStorage.getItem("contactPageNeedReload") === "true" &&
    currentPath.startsWith("/admin/contact")
  ) {
    localStorage.removeItem("contactPageNeedReload");
    location.reload();
    return;
  }

    const contactTableBody = document.getElementById("contact-table-body");
    const paginationContainer = document.getElementById("pagination");

    if (!contactTableBody || !paginationContainer) {
    console.error("Thi·∫øu ph·∫ßn t·ª≠ b·∫£ng ho·∫∑c ph√¢n trang.");
    return;
  }

    function renderTablePage(contactPageData) {
      if (contactPageData.length === 0) {
        contactTableBody!.innerHTML = `<tr><td colspan="8" class="text-center py-4 text-gray-500">Kh√¥ng c√≥ li√™n h·ªá n√†o.</td></tr>`;
        paginationContainer!.innerHTML = "";
        return;
      }

      contactTableBody!.innerHTML = contactPageData.map((c) => {
        const date = new Date(c.createdAt);
        const dateStr = date.toLocaleDateString("vi-VN");
        const timeStr = date.toLocaleTimeString("vi-VN", {
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
          hour12: false
        });

        return `
          <tr class="border-b hover:bg-gray-100 transition duration-200">
            <td class="px-4 py-3 text-sm text-gray-500">${dateStr} ${timeStr}</td>
            <td class="px-4 py-3">${c.nameCustomer}</td>
            <td class="px-4 py-3">${c.email}</td>
            <td class="px-4 py-3">${c.phone}</td>
            <td class="px-4 py-3 capitalize">${getBusinessTypeLabel(c.businessType)}</td>
            <td class="px-4 py-3 capitalize">${getBusinessCategoryLabel(c.businessCategory)}</td>
            <td class="px-4 py-3 text-sm font-medium status-cell">${c.status === "read" ? "‚úÖ ƒê√£ xem" : "‚ùå Ch∆∞a xem"}</td>
            <td class="px-4 py-3">
              <a href="#" class="mark-read-btn bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm" data-id="${c.id}">Xem chi ti·∫øt</a>
            </td>
          </tr>
        `;
      }).join("");

      setupMarkReadEvents();
    }

    function setupMarkReadEvents() {
      document.querySelectorAll(".mark-read-btn").forEach((btn) => {
        if (!(btn instanceof HTMLElement)) return;
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          const id = btn.dataset.id;
          const row = btn.closest("tr");
          const statusCell = row?.querySelector(".status-cell");

          // N·∫øu ƒë√£ l√† "ƒê√£ xem" th√¨ kh√¥ng c·∫ßn g·ª≠i l·∫°i
          if (statusCell!.textContent!.includes("‚úÖ")) {
            window.location.href = `/admin/contactdetail?id=${id}`;
            return;
          }

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
          statusCell!.textContent = "‚úÖ ƒê√£ xem";

          fetch("/api/update-contact-status", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id })
          }).catch((err) => {
            console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
          });

          // ‚ö†Ô∏è Ghi nh·ªõ c·∫ßn reload khi quay v·ªÅ contact
          localStorage.setItem("contactPageNeedReload", "true");

          // Chuy·ªÉn h∆∞·ªõng sang trang chi ti·∫øt
          setTimeout(() => {
            window.location.href = `/admin/contactdetail?id=${id}`;
          }, 200);
        });
      });
    }
    

    const paginationInstance = initPagination({
      data: contact,
      itemsPerPage: 10,
      onRenderPage: renderTablePage,
      paginationContainer,
    });

    let filteredContact = [...contact];

const filterDateInput = document.getElementById("filter-date");
const searchInput = document.getElementById("search-input");
const filterStatusInput = document.getElementById("filter-status");

const dateDisplay = document.getElementById("selected-date-display");

function applyFilterAndSearch() {
  const searchValue = (searchInput as HTMLInputElement)?.value.trim().toLowerCase();
  const selectedDate = (filterDateInput as HTMLInputElement)?.value; // yyyy-mm-dd
  const selectedStatus = (filterStatusInput as HTMLSelectElement)?.value;

  filteredContact = contact.filter((c) => {
    const matchSearch =
      c.nameCustomer.toLowerCase().includes(searchValue) ||
      c.phone.includes(searchValue);

    const contactDate = new Date(c.createdAt);
    const formattedDate = contactDate.toISOString().split("T")[0]; // yyyy-mm-dd

    const matchDate = selectedDate ? formattedDate === selectedDate : true;
    const matchStatus = selectedStatus ? c.status === selectedStatus : true;

    return matchSearch && matchDate && matchStatus;
  });

  paginationInstance.render(filteredContact);

  // ‚úÖ Hi·ªÉn th·ªã ng√†y ng∆∞·ªùi d√πng ƒë√£ ch·ªçn theo ƒë·ªãnh d·∫°ng dd/mm/yyyy
  if (selectedDate) {
    const [year, month, day] = selectedDate.split("-");
    dateDisplay!.textContent = `B·∫°n ƒë√£ ch·ªçn: ${day}/${month}/${year}`;
  } else {
    dateDisplay!.textContent = "";
  }
}


    // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi
    filterDateInput?.addEventListener("change", applyFilterAndSearch);
    searchInput?.addEventListener("input", applyFilterAndSearch);
    filterStatusInput?.addEventListener("change", applyFilterAndSearch);


    paginationInstance.render(filteredContact);


  });
</script>


