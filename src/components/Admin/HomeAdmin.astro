---
import products from "../../data/products.json";
const totalProducts = products.length;
import news from "../../data/news.json";
const totalNews = news.length;
import contact from "../../data/contact.json";
const unreadContacts = contact.filter(item => item.status === "unread").length;
---

<section class="pt-24 px-4 pb-12 bg-gray-100 min-h-screen">
  <div class="max-w-screen-xl mx-auto">
    <h1 class="text-3xl font-bold text-gray-800 mb-8">T·ªïng quan qu·∫£n tr·ªã</h1>

    <!-- Th·ªëng k√™ -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-10">
      <!-- S·∫£n ph·∫©m -->
      <div class="bg-white shadow-md rounded-lg p-6 flex flex-col justify-between h-full">
        <div>
          <h2 class="text-lg font-semibold text-gray-700">T·ªïng S·∫£n ph·∫©m</h2>
          <p class="text-3xl font-extrabold text-indigo-600 mt-3">{totalProducts}</p>
        </div>
        <a href="/admin/products" class="mt-5 inline-block text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 px-4 py-2 rounded-lg transition-colors duration-200 text-center">
          üì¶ Xem chi ti·∫øt
        </a>
      </div>

      <!-- Tin t·ª©c -->
      <div class="bg-white shadow-md rounded-lg p-6 flex flex-col justify-between h-full">
        <div>
          <h2 class="text-lg font-semibold text-gray-700">Tin T·ª©c hi·ªán c√≥</h2>
          <p class="text-3xl font-extrabold text-green-600 mt-3">{totalNews}</p>
        </div>
        <a href="/admin/news" class="mt-5 inline-block text-sm font-medium text-white bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg transition-colors duration-200 text-center">
          üì∞ Xem chi ti·∫øt
        </a>
      </div>

      <!-- Li√™n h·ªá -->
      <div class="bg-white shadow-md rounded-lg p-6 flex flex-col justify-between h-full">
        <div>
          <h2 class="text-lg font-semibold text-gray-700">Li√™n H·ªá ch∆∞a xem</h2>
          <p class="text-3xl font-extrabold text-blue-600 mt-3">{unreadContacts}</p>
        </div>
        <a href="/admin/contact" class="mt-5 inline-block text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg transition-colors duration-200 text-center">
          üîç Xem chi ti·∫øt
        </a>
      </div>
    </div>

    <!-- Ch·ªçn s·∫£n ph·∫©m n·ªïi b·∫≠t -->
    <div class="max-w-7xl mx-auto">
      <div class="mb-6 flex justify-between items-center flex-col sm:flex-row gap-4">
        <h1 class="text-3xl font-bold">üåü Ch·ªçn s·∫£n ph·∫©m n·ªïi b·∫≠t (t·ªëi ƒëa 4)</h1>
        <input
          id="search-input"
          type="text"
          placeholder="üîç T√¨m theo t√™n s·∫£n ph·∫©m..."
          class="w-full sm:w-80 px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
        />
      </div>

      <div id="product-selection" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-8"></div>
      <div id="pagination-controls" class="flex justify-center gap-2 flex-wrap mt-4"></div>
      <button id="save-button" class="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
        üíæ L∆∞u danh s√°ch s·∫£n ph·∫©m n·ªïi b·∫≠t
      </button>
      <p id="status" class="mt-4 text-green-600 font-semibold"></p>
    </div>
  </div>
</section>

<script type="module">
  const selectionEl = document.getElementById("product-selection");
  const paginationEl = document.getElementById("pagination-controls");
  const searchInput = document.getElementById("search-input");
  const statusEl = document.getElementById("status");
  const selected = new Map();
  let allProducts = [];
  let filteredProducts = [];
  let currentPage = 1;
  const itemsPerPage = 8; // ‚úÖ B·∫°n c√≥ th·ªÉ thay ƒë·ªïi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªói trang

  function renderPagination(totalItems) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    paginationEl.innerHTML = "";

    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement("button");
      btn.textContent = i;
      btn.className = `px-3 py-1 rounded ${i === currentPage ? "bg-blue-600 text-white" : "bg-white border"} hover:bg-blue-100 transition`;
      btn.addEventListener("click", () => {
        currentPage = i;
        renderProducts(filteredProducts);
      });
      paginationEl.appendChild(btn);
    }
  }

  function renderProducts(list) {
    selectionEl.innerHTML = "";

    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const pageItems = list.slice(start, end);

    pageItems.forEach(product => {
      const isSelected = selected.has(product.id);
      const card = document.createElement("div");
      card.className = `border rounded-lg p-4 bg-white shadow relative hover:shadow-lg transition-all duration-200 ${isSelected ? "ring-2 ring-blue-600" : ""}`;

      card.innerHTML = `
        <div class="flex flex-col h-full items-center text-center">
          <img src="${product.image}" alt="${product.name}"
            class="w-24 h-24 object-contain mb-3 rounded-full border-2 border-blue-300 bg-white shadow-md" />
          <h2 class="text-sm font-semibold text-gray-800 mb-3 min-h-[3rem] px-1">${product.name}</h2>
          <button class="select-btn mt-auto w-full px-3 py-1 rounded font-medium 
                  transition duration-200 ${isSelected ? "bg-red-500 hover:bg-red-600 text-white" : "bg-blue-500 hover:bg-blue-600 text-white"}">
            ${isSelected ? "B·ªè ch·ªçn" : "Ch·ªçn"}
          </button>
        </div>
      `;

      const btn = card.querySelector(".select-btn");
      btn.addEventListener("click", () => {
        if (selected.has(product.id)) {
          selected.delete(product.id);
        } else {
          if (selected.size >= 4) {
            alert("Ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 4 s·∫£n ph·∫©m n·ªïi b·∫≠t.");
            return;
          }
          selected.set(product.id, product);
        }
        renderProducts(filteredProducts); // c·∫≠p nh·∫≠t l·∫°i giao di·ªán
      });

      selectionEl.appendChild(card);
    });

    renderPagination(list.length);
  }

  async function loadProducts() {
    const res = await fetch("/api/products.json");
    allProducts = await res.json();

    const featuredRes = await fetch("/api/outstandingproducts.json");
    const featured = await featuredRes.json();

    featured.forEach(p => selected.set(p.id, p));

    filteredProducts = allProducts;
    currentPage = 1;
    renderProducts(filteredProducts);
  }

  document.getElementById("save-button").addEventListener("click", async () => {
    const data = Array.from(selected.values()).map(({ id, name, image }) => ({ id, name, image }));
    const res = await fetch("/api/outstandingproducts.json", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });

    statusEl.textContent = res.ok ? "üéâ L∆∞u th√†nh c√¥ng!" : "‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u.";
  });

  searchInput.addEventListener("input", (e) => {
    const keyword = e.target.value.trim().toLowerCase();
    filteredProducts = allProducts.filter(p => p.name.toLowerCase().includes(keyword));
    currentPage = 1;
    renderProducts(filteredProducts);
  });

  loadProducts();
</script>
