---
const success = Astro.url.searchParams.get("success");
---

    <section class="max-w-5xl mx-auto px-4 py-12 mt-12">
      <h1 class="text-3xl font-bold mb-8 text-center">Th√™m S·∫£n Ph·∫©m H√≥a H·ªçc</h1>

      {success && <div class="text-green-600 text-center font-semibold mb-4">‚úÖ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l∆∞u!</div>}

      <form method="POST" action="/api/addproduct" enctype="multipart/form-data" id="product-form" class="space-y-8 bg-white p-6 rounded-xl shadow border">
        <!-- TH√îNG TIN CHUNG -->
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label class="font-semibold block mb-1">T√™n h√≥a h·ªçc</label>
            <input name="name" type="text" required class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">C√¥ng th·ª©c ph√¢n t·ª≠</label> 
            <input name="formula" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">Kh·ªëi l∆∞·ª£ng ph√¢n t·ª≠</label>
            <input name="molarMass" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">S·ªë CAS</label>
            <input name="cas" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">S·ªë EINECS</label>
            <input name="einecs" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">M√£ H.S</label>
            <input name="hsCode" type="text" class="w-full border p-2 rounded" />
          </div>
        </div>

        <div>
          <label class="font-semibold block mb-1">H√¨nh th·ª©c</label>
          <textarea name="appearance" rows="3" class="w-full border p-2 rounded"></textarea>
        </div>
        <div>
          <label class="font-semibold block mb-1">·ª®ng d·ª•ng</label>
          <textarea name="application" rows="3" class="w-full border p-2 rounded"></textarea>
        </div>
        

        <div>
          <label class="font-semibold block mb-1">ƒê√≥ng g√≥i v√† b·∫£o qu·∫£n</label>
          <textarea name="storage" rows="3" class="w-full border p-2 rounded"></textarea>
        </div>

        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label class="font-semibold block mb-1">üîñ Lo·∫°i s·∫£n ph·∫©m (tags)</label>
            <input name="tags" type="text" placeholder="VD: h√≥a ch·∫•t, ph·ª• gia, c√¥ng nghi·ªáp" class="w-full border p-2 rounded" />
            <p class="text-sm text-gray-500 mt-1">C√°ch nhau b·∫±ng d·∫•u ph·∫©y.</p>
          </div>

          <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label class="font-semibold block mb-1">üñºÔ∏è ·∫¢nh ƒë·∫°i di·ªán</label>
            <input id="thumbnailInput" name="thumbnail" type="file" accept="image/*"  class="block w-full mb-2 border border-gray-300 border-solid rounded-md px-3 py-2 text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-[var(--color-3)] file:text-white hover:file:bg-[var(--color-4)] cursor-pointer" />
            <div>
              <strong>Xem tr∆∞·ªõc ·∫£nh ƒë·∫°i di·ªán:</strong>
              <div id="thumbnailPreview" class="mt-2">
                <p class="text-gray-500">Ch∆∞a c√≥ ·∫£nh</p>
              </div>
            </div>
          </div>

          <div>
            <label class="font-semibold block mb-1">üñºÔ∏è ·∫¢nh s·∫£n ph·∫©m</label>
            <input id="imagesInput" name="images" type="file" multiple accept="image/*" class="block w-full mb-2 border border-gray-300 border-solid rounded-md px-3 py-2 text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-[var(--color-3)] file:text-white hover:file:bg-[var(--color-4)] cursor-pointer" />
            <div>
              <strong>Xem tr∆∞·ªõc ·∫£nh s·∫£n ph·∫©m:</strong>
              <div id="imagesPreview" class="mt-2 flex flex-wrap gap-4"></div>
            </div>
          </div>
        </div>

        </div>

        <!-- CH·ªà TI√äU K·ª∏ THU·∫¨T -->
        <div>
          <h2 class="text-xl font-bold mb-3">üìä Ch·ªâ ti√™u k·ªπ thu·∫≠t</h2>

<!-- Th√™m c·ªôt -->
<div class="flex items-center gap-2 mb-4">
  <input type="text" id="new-column-name" placeholder="T√™n c·ªôt m·ªõi" class="border p-2 rounded w-60" />
  <button type="button" id="add-column-btn" class="bg-green-500 text-white px-4 py-1 rounded hover:bg-green-600">‚ûï Th√™m c·ªôt</button>
</div>

<!-- B·∫£ng nh·∫≠p -->
<div class="overflow-x-auto">
  <table class="min-w-full border border-gray-300 text-sm text-left">
    <thead class="bg-gray-100 text-gray-700 font-semibold">
      <tr id="spec-header">
        <!-- c·ªôt s·∫Ω ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y -->
      </tr>
    </thead>
    <tbody id="spec-list">
      <!-- d√≤ng s·∫Ω ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y -->
    </tbody>
  </table>
</div>

  <!-- Th√™m d√≤ng -->
  <button type="button" id="add-spec-row" class="mt-3 bg-gray-200 px-4 py-1 rounded hover:bg-gray-300">
    ‚ûï Th√™m d√≤ng
  </button>


        <div class="text-right">
            <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
                ‚úÖ Th√™m s·∫£n ph·∫©m
            </button>
            </div>

      </form>
    </section>

<script type="module">
  const specList = document.getElementById("spec-list");
  const specHeader = document.getElementById("spec-header");
  const addSpecRowBtn = document.getElementById("add-spec-row");
  const addColumnBtn = document.getElementById("add-column-btn");
  const newColNameInput = document.getElementById("new-column-name");

  let columnNames = [];

const thumbnailInput = document.getElementById("thumbnailInput");
const thumbnailPreview = document.getElementById("thumbnailPreview");

const imagesInput = document.getElementById("imagesInput");
const imagesPreview = document.getElementById("imagesPreview");

document.getElementById("product-form").addEventListener("submit", async (e) => {
  e.preventDefault();

  const form = e.target;
  const formData = new FormData(form);

  // B·ªè h·∫øt ·∫£nh trong form c≈© (n·∫øu c·∫ßn)
  formData.delete("images");

  // G·ª≠i ·∫£nh t·ª´ selectedImages (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω x√≥a)
  selectedImages.forEach((file) => {
    formData.append("images", file);
  });

  // G·ª≠i ·∫£nh ƒë·∫°i di·ªán th·ªß c√¥ng (v√¨ FileList kh√¥ng c√≤n trong form n·∫øu ch·ªçn l·∫°i)
  const thumbnailFile = thumbnailInput.files[0];
  if (thumbnailFile) {
    formData.set("thumbnail", thumbnailFile);
  }

  const response = await fetch("/api/addproduct", {
    method: "POST",
    body: formData,
  });

  if (response.redirected) {
    window.location.href = response.url;
  }
});


thumbnailInput.addEventListener("change", function () {
  thumbnailPreview.innerHTML = "";
  const file = this.files[0];
  if (!file) {
    thumbnailPreview.innerHTML = `<p class="text-gray-500">Ch∆∞a c√≥ ·∫£nh</p>`;
    return;
  }
  const reader = new FileReader();
  reader.onload = function (e) {
    const img = document.createElement("img");
    img.src = e.target.result;
    img.className = "w-32 h-32 object-cover rounded-lg border-2 border-blue-500 shadow";
    thumbnailPreview.appendChild(img);
  };
  reader.readAsDataURL(file);
});

let selectedImages = [];

imagesInput.addEventListener("change", function () {
  const newFiles = Array.from(this.files || []);

  newFiles.forEach((file) => {
    // Tr√°nh th√™m ·∫£nh tr√πng
    const isDuplicate = selectedImages.some(
      (f) => f.name === file.name && f.size === file.size
    );
    if (!isDuplicate) {
      selectedImages.push(file);

      const reader = new FileReader();
      reader.onload = function (e) {
        const container = document.createElement("div");
        container.className = "relative";

        const img = document.createElement("img");
        img.src = e.target.result;
        img.className = "w-28 h-28 object-cover rounded border shadow";

        const removeBtn = document.createElement("button");
        removeBtn.innerHTML = "‚ùå";
        removeBtn.className =
          "absolute -top-2 -right-2 bg-white rounded-full border border-gray-300 text-red-500 text-sm px-1 hover:bg-red-100";

        // G·∫Øn s·ª± ki·ªán x√≥a ri√™ng cho ·∫£nh hi·ªán t·∫°i
        removeBtn.addEventListener("click", () => {
          // X√≥a ·∫£nh kh·ªèi danh s√°ch ƒë√£ ch·ªçn
          selectedImages = selectedImages.filter(
            (f) => !(f.name === file.name && f.size === file.size)
          );

          // X√≥a ·∫£nh kh·ªèi giao di·ªán
          container.remove();
        });

        container.appendChild(img);
        container.appendChild(removeBtn);
        imagesPreview.appendChild(container);
      };

      reader.readAsDataURL(file);
    }
  });

  // Reset ƒë·ªÉ c√≥ th·ªÉ ch·ªçn c√πng ·∫£nh n·∫øu mu·ªën
  this.value = "";
});



  function renderHeader() {
    const hasColumns = columnNames.length > 0;

    specHeader.innerHTML =
      columnNames
        .map(
          col => `
        <th class="break-words whitespace-normal border px-4 py-2 relative group hover:bg-red-50">
          ${col}
          <button 
            type="button" 
            class="absolute top-0 right-0 text-red-500 opacity-0 group-hover:opacity-100 transition"
            onclick="removeColumn('${col}')"
          >‚ùå</button>
        </th>`
        )
        .join("") +
      (hasColumns ? `<th class="border px-4 py-2 w-12"></th>` : "");
  }

  window.removeColumn = function (colToRemove) {
    columnNames = columnNames.filter(col => col !== colToRemove);
    if (columnNames.length === 0) {
      specList.innerHTML = "";
    }
    renderHeader();
    renderRows();
  };

  function renderRows() {
    const rows = Array.from(specList.children);
    const hasColumns = columnNames.length > 0;

    rows.forEach(row => {
      const oldInputs = row.querySelectorAll("textarea");
      const oldData = {};
      oldInputs.forEach(input => {
        const col = input.dataset.col;
        if (col) oldData[col] = input.value;
      });

      row.innerHTML =
        columnNames
          .map(
            col => `
          <td class="border px-4 py-2 align-top break-words whitespace-normal">
            <textarea 
              name="spec-${col}" 
              data-col="${col}" 
              class="p-2 rounded w-full break-words whitespace-normal resize-none overflow-hidden min-h-[40px]"
              oninput="autoResize(this)"
            >${oldData[col] || ""}</textarea>
          </td>`
          )
          .join("") +
        (hasColumns
          ? `<td class="border px-4 py-2 text-center">
              <button type="button" class="text-red-600 font-bold" onclick="this.closest('tr').remove()">‚ùå</button>
            </td>`
          : "");

      // Resize l·∫°i sau khi render
      const textareas = row.querySelectorAll("textarea");
      textareas.forEach(t => autoResize(t));
    });
  }

  addColumnBtn.addEventListener("click", () => {
    const colName = newColNameInput.value.trim();
    if (!colName || columnNames.includes(colName)) return;

    columnNames.push(colName);
    renderHeader();
    renderRows();
    newColNameInput.value = "";
  });

  addSpecRowBtn.addEventListener("click", () => {
    const row = document.createElement("tr");
    row.innerHTML =
      columnNames
        .map(
          col => `
        <td class="border px-4 py-2 align-top break-words whitespace-normal">
          <textarea 
            name="spec-${col}" 
            data-col="${col}" 
            class="p-2 rounded w-full break-words whitespace-normal resize-none overflow-hidden min-h-[40px]"
            oninput="autoResize(this)"
          ></textarea>
        </td>`
        )
        .join("") +
      `<td class="border px-4 py-2 text-center">
        <button type="button" class="text-red-600 font-bold" onclick="this.closest('tr').remove()">‚ùå</button>
      </td>`;
    specList.appendChild(row);
    row.querySelectorAll("textarea").forEach(t => autoResize(t));
    syncRowHeights();
  });

  window.autoResize = function (el) {
    el.style.height = "auto";
    el.style.height = el.scrollHeight + "px";
    syncRowHeights();
  };

  function syncRowHeights() {
    const rows = document.querySelectorAll("#spec-list tr");

    rows.forEach(row => {
      row.style.height = "auto";
      const cells = row.querySelectorAll("td");
      let maxHeight = 0;
      cells.forEach(cell => {
        cell.style.height = "auto";
        const h = cell.scrollHeight;
        if (h > maxHeight) maxHeight = h;
      });
      cells.forEach(cell => {
        cell.style.height = maxHeight + "px";
      });
    });
  }
</script>



