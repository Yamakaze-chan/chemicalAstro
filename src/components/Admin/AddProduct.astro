---
---

    <section class="max-w-5xl mx-auto px-4 py-12 mt-12">
      <h1 class="text-3xl font-bold mb-8 text-center">🧪 Thêm Sản Phẩm Hóa Học</h1>


      <form id="product-form" class="space-y-8 bg-white p-6 rounded-xl shadow border">
        <!-- THÔNG TIN CHUNG -->
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label class="font-semibold block mb-1">Tên hóa học</label>
            <input name="name" type="text" required class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">Công thức phân tử</label>
            <input name="formula" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">Khối lượng phân tử</label>
            <input name="molarMass" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">Số CAS</label>
            <input name="cas" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">Số EINECS</label>
            <input name="einecs" type="text" class="w-full border p-2 rounded" />
          </div>
          <div>
            <label class="font-semibold block mb-1">Mã H.S</label>
            <input name="hsCode" type="text" class="w-full border p-2 rounded" />
          </div>
        </div>

        <h2 class="text-xl font-bold mb-3">🧪 Thuộc tính chung</h2>

        <div id="prop-list" class="space-y-4">
          <!-- Các dòng sẽ render ở đây -->
        </div>

        <button type="button" id="add-prop-row" class="mt-2 bg-gray-200 px-4 py-1 rounded hover:bg-gray-300">
          ➕ Thêm thuộc tính
        </button>

        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label class="font-semibold block mb-1">🔖 Loại sản phẩm (tags)</label>
            <input name="tags" type="text" placeholder="VD: hóa chất, phụ gia, công nghiệp" class="w-full border p-2 rounded" />
            <p class="text-sm text-gray-500 mt-1">Cách nhau bằng dấu phẩy.</p>
          </div>
          <!-- 🌐 Ẩn URL ảnh đã upload -->
        <input type="hidden" id="thumbnailUrl" name="image" />
        <input type="hidden" id="imagesUrls" name="images" />

          <div class="grid md:grid-cols-2 gap-6">
  <div>
    <label class="font-semibold block mb-1">🖼️ Ảnh đại diện</label>
    <input id="thumbnailInput" name="thumbnail" type="file" accept="image/*" class="block w-full mb-2" />
    <div>
      <strong>Xem trước ảnh đại diện:</strong>
      <div id="thumbnailPreview" class="mt-2">
        <p class="text-gray-500">Chưa có ảnh</p>
      </div>
      <!-- Nút mở widget Cloudinary -->
      <button type="button" id="uploadThumbnailBtn" class="mt-2 px-3 py-1 bg-purple-600 text-white rounded hover:bg-purple-700">
        📤 Chọn ảnh đại
      </button>
    </div>
  </div>

  <div>
    <label class="font-semibold block mb-1">🖼️ Ảnh sản phẩm</label>
    <input id="imagesInput" name="images" type="file" multiple accept="image/*" class="block w-full mb-2" />
    <div>
      <strong>Xem trước ảnh sản phẩm:</strong>
      <div id="imagesPreview" class="mt-2 flex flex-wrap gap-4"></div>
    </div>
    <!-- Nút upload ảnh sản phẩm -->
    <button type="button" id="uploadImagesBtn" class="mt-2 px-3 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700">
      📤 Chọn ảnh sản phẩm
    </button>
  </div>
</div>
</div>

        <!-- CHỈ TIÊU KỸ THUẬT -->
        <div>
          <h2 class="text-xl font-bold mb-3">📊 Chỉ tiêu kỹ thuật</h2>

<!-- Thêm cột -->
<div class="flex items-center gap-2 mb-4">
  <input type="text" id="new-column-name" placeholder="Tên cột mới" class="border p-2 rounded w-60" />
  <button type="button" id="add-column-btn" class="bg-green-500 text-white px-4 py-1 rounded hover:bg-green-600">➕ Thêm cột</button>
</div>

<!-- Bảng nhập -->
<div class="overflow-x-auto">
  <table class="min-w-full border border-gray-300 text-sm text-left">
    <thead class="bg-gray-100 text-gray-700 font-semibold">
      <tr id="spec-header">
        <!-- cột sẽ được thêm ở đây -->
      </tr>
    </thead>
    <tbody id="spec-list">
      <!-- dòng sẽ được thêm ở đây -->
    </tbody>
  </table>
</div>

  <!-- Thêm dòng -->
  <button type="button" id="add-spec-row" class="mt-3 bg-gray-200 px-4 py-1 rounded hover:bg-gray-300">
    ➕ Thêm dòng
  </button>


        <div class="text-right">
            <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
                ✅ Thêm sản phẩm
            </button>
            </div>

      </form>
    </section>
<script src="https://upload-widget.cloudinary.com/global/all.js" type="text/javascript"></script>

<script type="module">
  const specList = document.getElementById("spec-list");
  const specHeader = document.getElementById("spec-header");
  const addSpecRowBtn = document.getElementById("add-spec-row");
  const addColumnBtn = document.getElementById("add-column-btn");
  const newColNameInput = document.getElementById("new-column-name");

  const propList = document.getElementById("prop-list");
  const addPropBtn = document.getElementById("add-prop-row");

  let columnNames = [];
  let cloudImages = [];
  let cloudThumbnail = "";

  const thumbnailInput = document.getElementById("thumbnailInput");
  const thumbnailPreview = document.getElementById("thumbnailPreview");
  const imagesInput = document.getElementById("imagesInput");
  const imagesPreview = document.getElementById("imagesPreview");

  // 🖼 Xử lý ảnh đại diện
  thumbnailInput.addEventListener("change", function () {
    thumbnailPreview.innerHTML = "";
    const file = this.files[0];
    if (!file) {
      thumbnailPreview.innerHTML = `<p class="text-gray-500">Chưa có ảnh</p>`;
      return;
    }
    const reader = new FileReader();
    reader.onload = function (e) {
      const img = document.createElement("img");
      img.src = e.target.result;
      img.className = "w-32 h-32 object-cover rounded-lg border-2 border-blue-500 shadow";
      thumbnailPreview.appendChild(img);
    };
    reader.readAsDataURL(file);
  });

  // 🖼 Xử lý ảnh sản phẩm
  imagesInput.addEventListener("change", function () {
    imagesPreview.innerHTML = "";
    const files = Array.from(this.files || []);
    if (files.length === 0) {
      imagesPreview.innerHTML = `<p class="text-gray-500">Chưa có ảnh</p>`;
      return;
    }
    files.forEach((file) => {
      const reader = new FileReader();
      reader.onload = function (e) {
        const img = document.createElement("img");
        img.src = e.target.result;
        img.className = "w-28 h-28 object-cover rounded border";
        imagesPreview.appendChild(img);
      };
      reader.readAsDataURL(file);
    });
  });

  // ☁️ Cloudinary
  const cloudName = "dlwv8fyyj";
  const uploadPreset = "chemical_img";

  document.getElementById("uploadThumbnailBtn").addEventListener("click", () => {
    cloudinary.createUploadWidget({ cloudName, uploadPreset, multiple: false }, (err, result) => {
      if (!err && result.event === "success") {
        cloudThumbnail = result.info.secure_url;
        document.getElementById("thumbnailUrl").value = cloudThumbnail;
        thumbnailPreview.innerHTML = `<img src="${cloudThumbnail}" class="w-32 h-32 object-cover rounded border-2 shadow" />`;
      }
    }).open();
  });

  document.getElementById("uploadImagesBtn").addEventListener("click", () => {
    cloudinary.createUploadWidget({ cloudName, uploadPreset, multiple: true }, (err, result) => {
      if (!err && result.event === "success") {
        const url = result.info.secure_url;
        cloudImages.push(url);
        document.getElementById("imagesUrls").value = JSON.stringify(cloudImages);
        const img = document.createElement("img");
        img.src = url;
        img.className = "w-24 h-24 object-cover rounded border";
        imagesPreview.appendChild(img);
      }
    }).open();
  });

  // 📊 Bảng chỉ tiêu kỹ thuật
  function renderHeader() {
    const hasColumns = columnNames.length > 0;
    specHeader.innerHTML = columnNames.map(col => `
      <th class="break-words whitespace-normal border px-4 py-2 relative group hover:bg-red-50">
        ${col}
        <button type="button" class="absolute top-0 right-0 text-red-500 opacity-0 group-hover:opacity-100 transition" onclick="removeColumn('${col}')">❌</button>
      </th>`).join("") + (hasColumns ? `<th class="border px-4 py-2 w-12"></th>` : "");
  }

  window.removeColumn = function (colToRemove) {
    columnNames = columnNames.filter(col => col !== colToRemove);
    if (columnNames.length === 0) specList.innerHTML = "";
    renderHeader();
    renderRows();
  };

  function renderRows() {
    const rows = Array.from(specList.children);
    const hasColumns = columnNames.length > 0;

    rows.forEach(row => {
      const oldInputs = row.querySelectorAll("textarea");
      const oldData = {};
      oldInputs.forEach(input => {
        const col = input.dataset.col;
        if (col) oldData[col] = input.value;
      });

      row.innerHTML = columnNames.map(col => `
        <td class="border px-4 py-2 align-top break-words whitespace-normal">
          <textarea name="spec-${col}" data-col="${col}" class="p-2 rounded w-full break-words whitespace-normal resize-none overflow-hidden min-h-[40px]" oninput="autoResize(this)">${oldData[col] || ""}</textarea>
        </td>`).join("") + (hasColumns ? `<td class="border px-4 py-2 text-center"><button type="button" class="text-red-600 font-bold" onclick="this.closest('tr').remove()">❌</button></td>` : "");

      row.querySelectorAll("textarea").forEach(t => autoResize(t));
    });
  }

  addColumnBtn.addEventListener("click", () => {
    const colName = newColNameInput.value.trim();
    if (!colName || columnNames.includes(colName)) return;
    columnNames.push(colName);
    renderHeader();
    renderRows();
    newColNameInput.value = "";
  });

  addSpecRowBtn.addEventListener("click", () => {
    const row = document.createElement("tr");
    row.innerHTML = columnNames.map(col => `
      <td class="border px-4 py-2 align-top break-words whitespace-normal">
        <textarea name="spec-${col}" data-col="${col}" class="p-2 rounded w-full break-words whitespace-normal resize-none overflow-hidden min-h-[40px]" oninput="autoResize(this)"></textarea>
      </td>`).join("") + `<td class="border px-4 py-2 text-center"><button type="button" class="text-red-600 font-bold" onclick="this.closest('tr').remove()">❌</button></td>`;
    specList.appendChild(row);
    row.querySelectorAll("textarea").forEach(t => autoResize(t));
    syncRowHeights();
  });

  window.autoResize = function (el) {
    el.style.height = "auto";
    el.style.height = el.scrollHeight + "px";
    syncRowHeights();
  };

  function syncRowHeights() {
    const rows = document.querySelectorAll("#spec-list tr");
    rows.forEach(row => {
      row.style.height = "auto";
      const cells = row.querySelectorAll("td");
      let maxHeight = 0;
      cells.forEach(cell => {
        cell.style.height = "auto";
        const h = cell.scrollHeight;
        if (h > maxHeight) maxHeight = h;
      });
      cells.forEach(cell => {
        cell.style.height = maxHeight + "px";
      });
    });
  }

  // 🧪 Thuộc tính động
  addPropBtn.addEventListener("click", () => {
    const row = document.createElement("div");
    row.className = "flex gap-2 items-start group relative";


    row.innerHTML = `
      <input type="text" name="prop-key" placeholder="Tên thuộc tính" class="border p-2 rounded w-1/3" />
      <textarea name="prop-value" placeholder="Giá trị" class="border p-2 rounded w-2/3 min-h-[40px] resize-y"></textarea>
      <button type="button" class="absolute top-1 right-1 text-red-600 font-bold opacity-0 group-hover:opacity-100 transition" title="Xoá dòng">❌</button>
    `;

    propList.appendChild(row);
  });

  propList.addEventListener("click", (e) => {
  if (e.target.tagName === "BUTTON" && e.target.textContent.trim() === "❌") {
    const row = e.target.closest(".group");
    if (row) row.remove();
  }
});

  // 📤 Gửi form
  document.getElementById("product-form").addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.target;

    const name = form.querySelector("input[name='name']").value;
    const formula = form.querySelector("input[name='formula']").value;
    const molarMass = form.querySelector("input[name='molarMass']").value;
    const cas = form.querySelector("input[name='cas']").value;
    const einecs = form.querySelector("input[name='einecs']").value;
    const hsCode = form.querySelector("input[name='hsCode']").value;
    const tags = form.querySelector("input[name='tags']").value;
    const image = document.getElementById("thumbnailUrl").value;

    let images = [];
    try {
      images = JSON.parse(document.getElementById("imagesUrls").value || "[]");
    } catch (e) {
      console.error("Lỗi parse images", e);
    }

    const specRows = [];
    document.querySelectorAll("#spec-list tr").forEach((row, rowIndex) => {
      row.querySelectorAll("textarea[data-col]").forEach(input => {
        specRows.push({ row: rowIndex, col: input.dataset.col, value: input.value });
      });
    });

    const props = [];
    document.querySelectorAll("#prop-list > div").forEach(row => {
      const key = row.querySelector("input[name='prop-key']").value.trim();
      const value = row.querySelector("textarea[name='prop-value']").value.trim();
      if (key) props.push({ key, value });
    });

    try {
      const res = await fetch("/api/addproduct", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name,
          formula,
          molarMass,
          cas,
          einecs,
          hsCode,
          tags,
          image,
          images,
          specifications: specRows,
          properties: props,
        }),
      });

      const result = await res.json();
      if (result.success) {
        alert("✅ Thêm sản phẩm thành công!");
        window.location.href = "/admin/products";
      } else {
        alert("❌ Lỗi: " + (result.message || "Không xác định"));
      }
    } catch (err) {
      alert("❌ Gửi thất bại: " + err.message);
    }
  });
</script>




