---
import { onMount } from "astro/client";
import "../styles/global.css";
---
<header class="z-[9999] fixed w-full">
    <div class="antialiased bg-gray-100 dark-mode:bg-gray-900">
    <div class="w-full text-[var(--color-2)] bg-[var(--color-3)] dark-mode:text-gray-200 dark-mode:bg-gray-800">
      <div x-data="{ open: false }" class="flex flex-col max-w-screen-xl px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-6 lg:px-8">
        <div class="flex flex-row items-center justify-between p-4">
          <a href="/" class="flex items-center">
            <img src="/assets/AnBinhLogo_250x100.svg" alt="Logo An Bình" class="h-8 w-auto mr-2 text-white" />
          </a>
          <button class="rounded-lg md:hidden focus:outline-none focus:shadow-outline" @click="open = !open">
            <svg fill="currentColor" viewBox="0 0 20 20" class="w-6 h-6">
              <path x-show="!open" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z" clip-rule="evenodd"></path>
              <path x-show="open" fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
        <nav :class="{'flex': open, 'hidden': !open}" class="flex-col flex-grow hidden pb-4 md:pb-0 md:flex md:justify-end md:flex-row">
          <a class="px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg dark-mode:bg-transparent dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 md:ml-4 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline" href="/">Trang Chủ</a>
          
          
          <div 
        class="relative group mt-2 md:mt-0 md:ml-4"
        x-data="{
          openAbout: false,
          isHoverable: window.matchMedia('(hover: hover)').matches,
          init() {
            const hoverQuery = window.matchMedia('(hover: hover)');
            this.isHoverable = hoverQuery.matches;
            hoverQuery.addEventListener('change', (e) => {
              this.isHoverable = e.matches;
            });
          }
        }"
        @click.away="openAbout = false"
      >
  <button 
    @click="if (!isHoverable) openAbout = !openAbout"
    class="flex items-center px-4 py-2 text-sm font-semibold text-[var(--color-2)] bg-[var(--color-3)] rounded-lg transition duration-200 w-full md:w-auto
           hover:text-gray-900 hover:bg-gray-200 focus:outline-none focus:shadow-outline"
  >
    <span>Về Chúng Tôi</span>
    <svg 
      fill="currentColor" 
      viewBox="0 0 20 20"
      :class="{ 'rotate-180': openAbout }"
      class="w-4 h-4 ml-2 transition-transform duration-200 transform group-hover:rotate-180"
    >
      <path 
        fill-rule="evenodd" 
        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" 
        clip-rule="evenodd"
      />
    </svg>
  </button>

  <!-- Dropdown -->
  <div 
    class="absolute right-0 mt-2 z-10 w-full transition-all duration-200 opacity-0 invisible 
           group-hover:opacity-100 group-hover:visible"
    :class="{ 'opacity-100 visible': openAbout }"
  >
    <div class="px-2 pt-2 pb-4 bg-[var(--color-3)] rounded-md shadow-lg">
      <div class="grid grid-cols-1 gap-2">
        <a 
          class="flex items-start rounded-lg p-2 text-white font-semibold text-sm hover:bg-gray-200 hover:text-[var(--color-3)] transition"
          href="/vission"
        >
          Tầm Nhìn
        </a>
        <a 
          class="flex items-start rounded-lg p-2 text-white font-semibold text-sm hover:bg-gray-200 hover:text-[var(--color-3)] transition"
          href="/mission"
        >
          Sứ Mệnh
        </a>
        <a 
          class="flex items-start rounded-lg p-2 text-white font-semibold text-sm hover:bg-gray-200 hover:text-[var(--color-3)] transition"
          href="/suitainability"
        >
          Tính Bền Vững
        </a>
      </div>
    </div>
  </div>
</div>


 


         <div 
          class="relative group mt-2 md:mt-0 md:ml-4"
          x-data="{
            openProduct: false,
            isHoverable: window.matchMedia('(hover: hover)').matches,
            init() {
              const hoverQuery = window.matchMedia('(hover: hover)');
              this.isHoverable = hoverQuery.matches;
              hoverQuery.addEventListener('change', (e) => {
                this.isHoverable = e.matches;
              });
            }
          }"
          @click.away="openProduct = false"
        >
          <button 
            @click="if (!isHoverable) openProduct = !openProduct"
            class="flex items-center px-4 py-2 text-sm font-semibold text-[var(--color-2)] bg-[var(--color-3)] rounded-lg transition duration-200 w-full md:w-auto
                  hover:text-gray-900 hover:bg-gray-200 focus:outline-none focus:shadow-outline"
          >
            <a>Sản Phẩm</a>
            <svg 
              fill="currentColor" 
              viewBox="0 0 20 20"
              :class="{ 'rotate-180': openProduct }"
              class="w-4 h-4 ml-2 transition-transform duration-200 transform group-hover:rotate-180"
            >
              <path 
                fill-rule="evenodd" 
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" 
                clip-rule="evenodd"
              />
            </svg>
          </button>

          <!-- Dropdown -->
<div 
  class="absolute right-0 mt-2 z-10 min-w-[240px] w-full transition-all duration-200 opacity-0 invisible 
         group-hover:opacity-100 group-hover:visible"
  :class="{ 'opacity-100 visible': openProduct }"
>
  <div class="px-4 pt-3 pb-5 bg-[var(--color-3)] rounded-md shadow-lg w-max max-w-md">
    <div id="tag-list" class="grid gap-2 grid-cols-1 md:grid-cols-2">
      <a 
        href="/product" 
        class="block px-4 py-2 break-words max-w-[160px] hover:bg-gray-200 hover:text-[var(--color-3)] rounded-md text-white font-semibold text-sm"
      >
        Tất cả sản phẩm
      </a>
      <!-- Các tag sẽ được render vào đây -->
    </div>
  </div>
</div>


        </div>





          <a class="px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg dark-mode:bg-transparent dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 md:ml-4 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline" href="/news">Tin Tức</a>
          <a class="px-4 py-2 mt-2 text-sm font-semibold bg-transparent rounded-lg dark-mode:bg-transparent dark-mode:hover:bg-gray-600 dark-mode:focus:bg-gray-600 dark-mode:focus:text-white dark-mode:hover:text-white dark-mode:text-gray-200 md:mt-0 md:ml-4 hover:text-gray-900 focus:text-gray-900 hover:bg-gray-200 focus:bg-gray-200 focus:outline-none focus:shadow-outline" href="/contactus">Liên Hệ</a>
        </nav>
      </div>
  </div>
</header>


<script>
  async function fetchAndRenderTags() {
    const container = document.getElementById("tag-list");
    if (!container) return;

    try {
      const res = await fetch('/api/products');
      const products = await res.json();

      const tags = [...new Set(products.flatMap(p => p.tags || []))];

      tags.forEach(tag => {
        const a = document.createElement("a");
        a.href = `/producttype?type=${encodeURIComponent(tag)}`;
        a.textContent = tag;
        a.className = "block px-4 py-2 break-words max-w-[160px] hover:bg-gray-200 hover:text-[var(--color-3)] rounded-md text-white font-semibold text-sm";
        container.appendChild(a);
      });
    } catch (err) {
      console.error("Lỗi khi tải tags:", err);
    }
  }

  fetchAndRenderTags();
</script>

