---
import '../../styles/global.css';
---

<div class="relative">
  <!-- Nền màu chiếm 50vh -->
  <div class="bg-[var(--color-1)] h-[50vh] w-full absolute top-0 left-0 z-0"></div>

  <!-- Nội dung nằm phía trên -->
  <section class="relative z-10 px-4 py-16">
    <h1 class="text-center text-white text-xl md:text-4xl font-bold mb-12">
      Sản phẩm nổi bật
    </h1>
    <div id="featured-products"
     class="flex overflow-x-auto gap-6 w-full px-2 py-6 hide-scrollbar cursor-grab"
     onmousedown="this.style.cursor='grabbing'"
     onmouseup="this.style.cursor='grab'">
      <!-- Các sản phẩm -->
    </div>
    <div class="text-center pt-10">
      <a href="/product"
        class="inline-flex items-center gap-2 px-6 py-3 rounded bg-[var(--color-4)] text-white font-bold
              hover:scale-105
              transition duration-300 shadow">
        Tất cả sản phẩm
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none"
             viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6" />
        </svg>
      </a>
    </div>
  </section>
</div>
<style>
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  #featured-products.grabbing {
  cursor: grabbing;
  cursor: -webkit-grabbing;
}

</style>

<script type="module">
  const container = document.getElementById("featured-products");

  async function loadFeaturedProducts() {
    try {
      const res = await fetch("/api/outstandingproducts");
      if (!res.ok) throw new Error("Failed to fetch featured products");

      const products = await res.json();
      if (!Array.isArray(products)) return;

      container.innerHTML = products.map(item => `
        <a href="/productdetail?id=${item.id}"
        class="group flex flex-col min-w-[260px] mx-auto max-w-[260px] flex-shrink-0 bg-[var(--color-2)] 
                hover:scale-105 hover:shadow-2xl
                transition-all duration-300 cursor-pointer h-full">
      
        <div class="flex flex-col h-full text-center justify-between">
          
          <!-- Phần trên: ảnh + tên -->
          <div>
            <img src="${item.image || '/images/placeholder.png'}" alt="${item.name}"
                class="w-full h-48 sm:h-56 object-cover border border-white mb-4" />

            <h2 class="text-base sm:text-lg md:text-xl min-h-[3.5rem] decoration-none shadow-lg">
              ${item.name}
            </h2>
          </div>

          <!-- Nút xem chi tiết luôn ở đáy -->
          <div class="pt-6 flex justify-center bg-white pb-4">
            <div class="px-4 py-1.5 text-base sm:text-lg md:text-xl font-bold  
                        group-hover:underline                      
                        transition duration-300">
              Xem chi tiết ➜
            </div>
          </div>

        </div>
      </a>


      `).join("");

    } catch (err) {
      console.error("❌ Lỗi khi tải sản phẩm nổi bật:", err);
      container.innerHTML = `<p class="text-white">Không thể tải sản phẩm nổi bật.</p>`;
    }
  }

  loadFeaturedProducts();
  // Kéo ngang bằng chuột như mobile, không gây xung đột với click
let isDown = false;
let startX;
let scrollLeft;
let isDragging = false;

container.addEventListener('mousedown', (e) => {
  isDown = true;
  isDragging = false;
  container.classList.add('grabbing');
  startX = e.pageX - container.offsetLeft;
  scrollLeft = container.scrollLeft;
});

container.addEventListener('mouseleave', () => {
  isDown = false;
  container.classList.remove('grabbing');
});

container.addEventListener('mouseup', () => {
  setTimeout(() => isDragging = false, 0); // reset sau tick
  isDown = false;
  container.classList.remove('grabbing');
});

container.addEventListener('mousemove', (e) => {
  if (!isDown) return;
  e.preventDefault();
  const x = e.pageX - container.offsetLeft;
  const walk = (x - startX) * 0.8; 
  if (Math.abs(walk) > 5) isDragging = true; // chỉ kéo nếu di chuyển đáng kể
  container.scrollLeft = scrollLeft - walk;
});

// Chặn click nếu vừa kéo
container.addEventListener('click', (e) => {
  if (isDragging) {
    e.preventDefault();
    e.stopPropagation();
  }
}, true);


</script>
